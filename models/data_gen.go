package models

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *A) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			return
		}
		switch msgp.UnsafeString(field) {
		case "name":
			z.Name, err = dc.ReadString()
			if err != nil {
				return
			}
		case "bd":
			z.BirthDay, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "p":
			z.Phone, err = dc.ReadString()
			if err != nil {
				return
			}
		case "s":
			z.Siblings, err = dc.ReadInt32()
			if err != nil {
				return
			}
		case "sp":
			z.Spouse, err = dc.ReadBool()
			if err != nil {
				return
			}
		case "m":
			z.Money, err = dc.ReadFloat64()
			if err != nil {
				return
			}
		case "b":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					return
				}
				z.Loc = nil
			} else {
				if z.Loc == nil {
					z.Loc = new(B)
				}
				var zb0002 uint32
				zb0002, err = dc.ReadMapHeader()
				if err != nil {
					return
				}
				for zb0002 > 0 {
					zb0002--
					field, err = dc.ReadMapKeyPtr()
					if err != nil {
						return
					}
					switch msgp.UnsafeString(field) {
					case "loc":
						z.Loc.Location, err = dc.ReadString()
						if err != nil {
							return
						}
					default:
						err = dc.Skip()
						if err != nil {
							return
						}
					}
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *A) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 7
	// write "name"
	err = en.Append(0x87, 0xa4, 0x6e, 0x61, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Name)
	if err != nil {
		return
	}
	// write "bd"
	err = en.Append(0xa2, 0x62, 0x64)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.BirthDay)
	if err != nil {
		return
	}
	// write "p"
	err = en.Append(0xa1, 0x70)
	if err != nil {
		return
	}
	err = en.WriteString(z.Phone)
	if err != nil {
		return
	}
	// write "s"
	err = en.Append(0xa1, 0x73)
	if err != nil {
		return
	}
	err = en.WriteInt32(z.Siblings)
	if err != nil {
		return
	}
	// write "sp"
	err = en.Append(0xa2, 0x73, 0x70)
	if err != nil {
		return
	}
	err = en.WriteBool(z.Spouse)
	if err != nil {
		return
	}
	// write "m"
	err = en.Append(0xa1, 0x6d)
	if err != nil {
		return
	}
	err = en.WriteFloat64(z.Money)
	if err != nil {
		return
	}
	// write "b"
	err = en.Append(0xa1, 0x62)
	if err != nil {
		return
	}
	if z.Loc == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		// map header, size 1
		// write "loc"
		err = en.Append(0x81, 0xa3, 0x6c, 0x6f, 0x63)
		if err != nil {
			return
		}
		err = en.WriteString(z.Loc.Location)
		if err != nil {
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *A) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 7
	// string "name"
	o = append(o, 0x87, 0xa4, 0x6e, 0x61, 0x6d, 0x65)
	o = msgp.AppendString(o, z.Name)
	// string "bd"
	o = append(o, 0xa2, 0x62, 0x64)
	o = msgp.AppendInt64(o, z.BirthDay)
	// string "p"
	o = append(o, 0xa1, 0x70)
	o = msgp.AppendString(o, z.Phone)
	// string "s"
	o = append(o, 0xa1, 0x73)
	o = msgp.AppendInt32(o, z.Siblings)
	// string "sp"
	o = append(o, 0xa2, 0x73, 0x70)
	o = msgp.AppendBool(o, z.Spouse)
	// string "m"
	o = append(o, 0xa1, 0x6d)
	o = msgp.AppendFloat64(o, z.Money)
	// string "b"
	o = append(o, 0xa1, 0x62)
	if z.Loc == nil {
		o = msgp.AppendNil(o)
	} else {
		// map header, size 1
		// string "loc"
		o = append(o, 0x81, 0xa3, 0x6c, 0x6f, 0x63)
		o = msgp.AppendString(o, z.Loc.Location)
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *A) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			return
		}
		switch msgp.UnsafeString(field) {
		case "name":
			z.Name, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				return
			}
		case "bd":
			z.BirthDay, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				return
			}
		case "p":
			z.Phone, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				return
			}
		case "s":
			z.Siblings, bts, err = msgp.ReadInt32Bytes(bts)
			if err != nil {
				return
			}
		case "sp":
			z.Spouse, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				return
			}
		case "m":
			z.Money, bts, err = msgp.ReadFloat64Bytes(bts)
			if err != nil {
				return
			}
		case "b":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.Loc = nil
			} else {
				if z.Loc == nil {
					z.Loc = new(B)
				}
				var zb0002 uint32
				zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
				if err != nil {
					return
				}
				for zb0002 > 0 {
					zb0002--
					field, bts, err = msgp.ReadMapKeyZC(bts)
					if err != nil {
						return
					}
					switch msgp.UnsafeString(field) {
					case "loc":
						z.Loc.Location, bts, err = msgp.ReadStringBytes(bts)
						if err != nil {
							return
						}
					default:
						bts, err = msgp.Skip(bts)
						if err != nil {
							return
						}
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *A) Msgsize() (s int) {
	s = 1 + 5 + msgp.StringPrefixSize + len(z.Name) + 3 + msgp.Int64Size + 2 + msgp.StringPrefixSize + len(z.Phone) + 2 + msgp.Int32Size + 3 + msgp.BoolSize + 2 + msgp.Float64Size + 2
	if z.Loc == nil {
		s += msgp.NilSize
	} else {
		s += 1 + 4 + msgp.StringPrefixSize + len(z.Loc.Location)
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *B) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			return
		}
		switch msgp.UnsafeString(field) {
		case "loc":
			z.Location, err = dc.ReadString()
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z B) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 1
	// write "loc"
	err = en.Append(0x81, 0xa3, 0x6c, 0x6f, 0x63)
	if err != nil {
		return
	}
	err = en.WriteString(z.Location)
	if err != nil {
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z B) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 1
	// string "loc"
	o = append(o, 0x81, 0xa3, 0x6c, 0x6f, 0x63)
	o = msgp.AppendString(o, z.Location)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *B) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			return
		}
		switch msgp.UnsafeString(field) {
		case "loc":
			z.Location, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z B) Msgsize() (s int) {
	s = 1 + 4 + msgp.StringPrefixSize + len(z.Location)
	return
}
